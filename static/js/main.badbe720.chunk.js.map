{"version":3,"sources":["reportWebVitals.ts","gql/mutation/signup.ts","gql/query/getUserById.ts","services/LocalStorageService.ts","context/index.tsx","components/SidenavAndHeader/index.tsx","gql/mutation/markTaskAsCompleted.ts","gql/query/getAllUserProjects.ts","gql/susbcription/changesInTask.ts","gql/query/getUserByEmail.ts","components/Error/index.tsx","gql/mutation/newTask.ts","services/EnviromentVariablesService.ts","services/ApolloClient.ts","gql/mutation/newProject.ts","gql/mutation/joinToAnExistingProject.ts","index.tsx","pages/home/index.tsx","pages/login/index.tsx","pages/signup/index.tsx","pages/newTask/index.tsx","pages/newProject/index.tsx","pages/error/index.tsx","pages/error/index.module.scss"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SIGNUP","gql","GET_USER_BY_ID","subject","Subject","LocalStorageService","localStorage","getItem","userId","setItem","next","removeItem","UserContext","createContext","user","undefined","loginUser","logoutUser","signupUser","ContextProvider","children","useState","setUser","history","useHistory","useMutation","userSignup","useQuery","variables","getUserIdFromLocalStorage","data","loading","refetch","error","useEffect","push","getUserById","Provider","value","setUserIdInLocalStorage","removeUserIdFromLocalStorage","window","location","reload","email","name","res","SidenavAndHeader","userProjects","activeProject","setActiveProject","useContext","sidenav","useRef","popup","M","Sidenav","init","current","Modal","className","data-target","id","ref","src","alt","map","project","onClick","_id","to","shareCode","href","MARK_TASK_AS_COMPLETED","GET_ALL_USER_PROJECTS","CHANGES_IN_TASK","GET_USER_BY_EMAIL","ErrorCard","NEW_TASK","require","config","EnviromentVariables","process","this","getPort","wsLink","WebSocketLink","uri","getUriForWsServer","options","reconnect","httpLink","HttpLink","getUriForHttpServer","splitLink","split","query","definition","getMainDefinition","kind","operation","apolloClient","ApolloClient","link","cache","InMemoryCache","NEW_PROJECT","JOIN_TO_AN_EXISTING_PROJECT","ReactDOM","render","ApolloProvider","client","StrictMode","exact","path","component","markTaskAsCompleted","setUserProjects","useSubscription","allUserProjects","onError","getAllUserProjects","markAsCompleted","taskId","projectId","tasks","task","completed","useForm","register","handleSubmit","customError","setCustomError","useLazyQuery","userLogin","getUserByEmail","onSubmit","input","type","placeholder","required","a","result","signup","ok","err","setError","newTask","useParams","projectName","taskName","newProject","joinProject","FormSelect","parseInt","joinToExistingProject","styles","taskiaImage","document","getElementById","module","exports"],"mappings":"wPAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wFCPDQ,EAASC,YAAH,6JCANC,EAAiBD,YAAH,yJ,gBCArBE,EAAU,I,OAAIC,GAEPC,EAAb,kHACE,WAEE,QADyBC,aAAaC,QAAQ,YAFlD,qCAME,SAA+BC,GAC7BF,aAAaG,QAAQ,SAAUD,GAC/BL,EAAQO,KAAK,KARjB,0CAWE,WACEJ,aAAaK,WAAW,YAZ5B,uCAeE,WACE,OAAOL,aAAaC,QAAQ,YAhBhC,gCAmBE,WACE,OAAOJ,MApBX,K,OCaaS,EAAcC,wBAAuB,CAChDC,UAAMC,EACNC,UAAW,aACXC,WAAY,aACZC,WAAY,eAGDC,EAAgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9C,EAAwBC,qBAAxB,mBAAOP,EAAP,KAAaQ,EAAb,KACMC,EAAUC,cAChB,EAAqBC,YAAYzB,GAA1B0B,EAAP,oBACA,EAA0CC,YAEvCzB,EAAgB,CACjB0B,UAAW,CAAEpB,OAAQH,EAAoBwB,+BAHnCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,QAASC,EAAhC,EAAgCA,MAMhCC,qBAAU,WACH7B,EAAoBwB,6BACvBN,EAAQY,KAAK,YAEd,IAEHD,qBAAU,YACJJ,GAASC,GAAYE,GACvBX,EAAQQ,EAAKM,eAEd,CAACN,IAqBJ,OACE,cAAClB,EAAYyB,SAAb,CAAsBC,MAAO,CAAExB,OAAME,UApBrB,SAACR,GACjBH,EAAoBkC,wBAAwB/B,GAC5CwB,KAkBgDf,WAf/B,WACjBZ,EAAoBmC,+BACpBC,OAAOC,SAASC,UAa4CzB,WAV3C,SAAC0B,EAAeC,GACjC,OAAOnB,EAAW,CAChBE,UAAW,CACTgB,MAAOA,EACPC,KAAMA,KAEPnD,MAAK,SAACoD,GAAD,OAASA,OAIjB,SACG1B,KC1DM2B,EAAmB,SAAC,GAQ1B,IAPLC,EAOI,EAPJA,aACAC,EAMI,EANJA,cACAC,EAKI,EALJA,iBAMA,EAA6BC,qBAAWvC,GAAhCE,EAAR,EAAQA,KAAMG,EAAd,EAAcA,WACRmC,EAAUC,iBAA8B,MACxCC,EAAQD,iBAA8B,MAO5C,OALAnB,qBAAU,WACRqB,IAAEC,QAAQC,KAAKL,EAAQM,SACvBH,IAAEI,MAAMF,KAAKH,EAAMI,WAClB,IAGD,qCACE,8BACE,sBAAKE,UAAU,cAAf,UACE,mBAAGA,UAAU,aAAb,gBAA2BX,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAeJ,OAC1C,4BACE,mBACEe,UAAU,iCACVC,cAAY,YAFd,yBAQN,sBAAKC,GAAG,YAAYF,UAAU,4BAA4BG,IAAKX,EAA/D,UACE,sBAAKQ,UAAU,kBAAf,UACE,qBACEI,IAAI,iBACJC,IAAI,aACJL,UAAU,mBAEX9C,GAAQ,4BAAIA,EAAK+B,UAEpB,gCACE,qBAAIe,UAAU,aAAd,UACE,qBAAIA,UAAU,0BAAd,UACE,mBAAGA,UAAU,iBAAb,yBADF,cAGCZ,EACCA,EAAakB,KAAI,SAACC,GAChB,OACE,oBACEP,UAAU,kBAEVQ,QAAS,kBAAMlB,EAAiBiB,IAHlC,SAIGA,EAAQtB,MAFJsB,EAAQE,QAOnB,yCAGF,yBACET,UAAU,2CACVC,cAAY,SAFd,UAGG,IACD,mBAAGD,UAAU,iBAAb,mBAJF,6BAOF,cAAC,IAAD,CAAMU,GAAG,cAAT,SACE,yBAAQV,UAAU,2CAAlB,UACG,IACD,mBAAGA,UAAU,iBAAb,iBAFF,oBAKF,qBAAKA,UAAU,aAAf,SACE,yBAAQA,UAAU,eAAeQ,QAAS,kBAAMnD,KAAhD,UACE,mBAAG2C,UAAU,kBAAb,oBADF,eAIF,sBAAKE,GAAG,SAASF,UAAU,QAAQG,IAAKT,EAAxC,UACE,sBAAKM,UAAU,iBAAf,UACE,iDACCX,GAAiB,4BAAIA,EAAcsB,eAEtC,qBAAKX,UAAU,eAAf,SACE,mBACEY,KAAK,KACLZ,UAAU,gDAFZ,kC,SC5FDa,EAAyBxE,YAAH,yMCAtByE,EAAwBzE,YAAH,qQCArB0E,EAAkB1E,YAAH,oF,2CCAf2E,EAAoB3E,YAAH,4JCFjB4E,EAAY,SAAC,GAAkC,IAAhC5C,EAA+B,EAA/BA,MAC1B,OAAO,oBAAI2B,UAAU,2BAAd,SAA0C3B,KCCtC6C,EAAW7E,YAAH,uL,6FCFrB8E,EAAQ,KAAUC,SAEX,I,MAAMC,GAAb,wGACE,WACE,MAAM,UAAN,OAAiBC,gBAAjB,YAA2DC,KAAKC,aAFpE,+BAIE,WACE,MACE,eAAQF,gBAAR,YAAgDC,KAAKC,UAArD,YACEF,cACI,IARZ,qBAWE,WACE,MAAOA,WAZX,KCGMG,GAAS,IAAIC,IAAc,CAC/BC,IAAKN,GAAoBO,oBACzBC,QAAS,CACPC,WAAW,KAITC,GAAW,IAAIC,IAAS,CAC5BL,IAAKN,GAAoBY,wBAGrBC,GAAYC,iBAChB,YAAgB,IAAbC,EAAY,EAAZA,MACKC,EAAaC,YAAkBF,GACrC,MACsB,wBAApBC,EAAWE,MACc,iBAAzBF,EAAWG,YAGff,GACAM,IAGWU,GAAe,IAAIC,IAAa,CAC3CC,KAAMT,GACNU,MAAO,IAAIC,MC5BAC,I,OAAczG,YAAH,gMCAX0G,GAA8B1G,YAAH,mM,oBCaxC2G,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBC,OAAQV,GAAxB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,UACE,cAAC,IAAMW,WAAP,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UCTd,WAAO,IAAD,IACpB5F,EAAUC,cACd,EAA8BC,YAAYgD,GAAnC2C,EAAP,oBACA,EAA0C/F,qBAA1C,mBAAO4B,EAAP,KAAsBC,EAAtB,KACA,EAAwC7B,qBAAxC,mBAAO2B,EAAP,KAAqBqE,EAArB,KACQvF,EAASwF,YAAgB3C,GAAzB7C,KACFyF,EAAkB5F,YAErB+C,EAAuB,CACxB9C,UAAW,CACTpB,OAAQH,EAAoBwB,6BAE9B2F,QAAS,WACPjG,EAAQY,KAAK,aAIjBD,qBAAU,YAENqF,EAAgBzF,MACfyF,EAAgBtF,OAChBsF,EAAgBxF,UAEjBmB,EAAiBqE,EAAgBzF,KAAK2F,mBAAmB,IACzDJ,EAAgBE,EAAgBzF,KAAK2F,uBAEtC,CAACF,EAAgBzF,OAEpB,IAAM4F,EAAkB,SAACC,GACvBP,EAAoB,CAClBxF,UAAW,CACTgG,UAAS,OAAE3E,QAAF,IAAEA,OAAF,EAAEA,EAAeoB,IAC1BsD,OAAQA,MASd,OAJAzF,qBAAU,WACRqF,EAAgBvF,YACf,CAACF,IAGF,qCACE,cAAC,EAAD,CACEkB,aAAcA,EACdC,cAAeA,EACfC,iBAAkBA,IAEpB,qBAAIU,UAAU,sBAAd,UACGX,EAAa,UACZA,EAAc4E,aADF,aACZ,EAAqB3D,KAAI,SAAC4D,GACxB,IAAKA,EAAKC,UACR,OACE,qBACEnE,UAAU,kBAEVQ,QAAS,kBAAMsD,EAAgBI,EAAKzD,MAHtC,UAIE,mBAAGT,UAAU,iBAAb,qCACCkE,EAAKjF,OAHDiF,EAAKjF,SASlB,+CAEDI,EAAa,UACZA,EAAc4E,aADF,aACZ,EAAqB3D,KAAI,SAAC4D,GACxB,GAAIA,EAAKC,UACP,OACE,qBACEnE,UAAU,2BAEVQ,QAAS,kBAAMsD,EAAgBI,EAAKzD,MAHtC,UAIE,mBAAGT,UAAU,iBAAb,uBACCkE,EAAKjF,OAHDiF,EAAKjF,SASlB,kDAGJ,qBAAKe,UAAU,mBAAf,SACE,wBACEA,UAAU,0BACVQ,QAAS,kBACP7C,EAAQY,KAAR,0BACcc,QADd,IACcA,OADd,EACcA,EAAeJ,KAD7B,mBACqCI,QADrC,IACqCA,OADrC,EACqCA,EAAeoB,OAJxD,gCD3EI,cAAC,IAAD,CAAO6C,KAAK,SAASC,UEXN,WACzB,MAAmCa,cAA3BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAClB,EAAsC7G,mBAAwB,MAA9D,mBAAO8G,EAAP,KAAoBC,EAApB,KACM7G,EAAUC,cAChB,EACE6G,YAAyCzD,GAD3C,mBAAO0D,EAAP,YAAoBxG,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,QAASE,EAAnC,EAAmCA,MAwBnC,OAZAC,qBAAU,YACJJ,GAASG,GAAUF,IACrB1B,EAAoBkC,wBAAwBT,EAAKyG,eAAelE,KAChE9C,EAAQY,KAAK,KACbM,OAAOC,SAASC,UAGbb,IAAQG,GAAUF,GACrBqG,EAAe,wBAEhB,CAACtG,IAGF,qCACE,8BACE,qBAAK8B,UAAU,cAAf,SACE,mBAAGA,UAAU,aAAb,wBAGJ,sBAAKA,UAAU,+BAAf,UACGuE,GAAe,cAAC,EAAD,CAAWlG,MAAOkG,IAClC,oDACA,sDACA,uBAAMK,SAAUN,GAhCL,SAACO,GAChBL,EAAe,MACfE,EAAU,CACR1G,UAAW,CACTgB,MAAO6F,EAAM7F,YA4Bb,UACE,mCACE8F,KAAK,QACL9E,UAAU,QACVE,GAAG,GACH6E,YAAY,oBACRV,EAAS,QAAS,CAAEW,UAAU,MAEpC,wBAAQhF,UAAU,qCAAlB,mBACA,8BACE,sEACsC,IACpC,cAAC,IAAD,CAAMU,GAAG,UAAT,qBAFF,8BFrCA,cAAC,IAAD,CAAO4C,KAAK,UAAUC,UGXN,WAC1B,MAAmCa,cAA3BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAClB,EAAsC7G,mBAAwB,MAA9D,mBAAO8G,EAAP,KAAoBC,EAApB,KACQlH,EAAeiC,qBAAWvC,GAA1BM,WACFsH,EAAQ,uCAAG,WAAO1G,GAAP,eAAA+G,EAAA,sEAC+C3H,EAC5DY,EAAKc,MACLd,EAAKe,MAHQ,QACTiG,EADS,QAKHhH,KAAKiH,OAAOC,IACtBZ,EAAeU,EAAOhH,KAAKiH,OAAOE,KANrB,2CAAH,sDAUd,OACE,qCACE,8BACE,qBAAKrF,UAAU,cAAf,SACE,mBAAGA,UAAU,aAAb,wBAGJ,sBAAKA,UAAU,+BAAf,UACE,6CACA,oEAECuE,GAAe,cAAC,EAAD,CAAWlG,MAAOkG,IAClC,uBAAMK,SAAUN,EAAaM,GAA7B,UACE,mCACEE,KAAK,OACL9E,UAAU,QACVE,GAAG,GACH6E,YAAY,YACRV,EAAS,OAAQ,CAAEW,UAAU,MAEnC,mCACEF,KAAK,QACL9E,UAAU,QACVE,GAAG,GACH6E,YAAY,oBACRV,EAAS,QAAS,CAAEW,UAAU,MAEpC,wBAAQhF,UAAU,qCAAlB,gCH7BE,cAAC,IAAD,CACEsD,KAAK,mCACLC,UInBS,WACrB,IAAM5F,EAAUC,cAChB,EAAmCwG,cAA3BE,EAAR,EAAQA,aAAcD,EAAtB,EAAsBA,SACtB,EAA0B5G,mBAAwB,MAAlD,mBAAOY,EAAP,KAAciH,EAAd,KACA,EAAkBzH,YAAYqD,GAAvBqE,EAAP,oBACA,EACEC,cADMC,EAAR,EAAQA,YAAazB,EAArB,EAAqBA,UAwBrB,OACE,qCACE,8BACE,qBAAKhE,UAAU,cAAf,SACE,mBAAGA,UAAU,aAAb,wBAGJ,qBAAKA,UAAU,MAAf,SACE,uBAAMA,UAAU,UAAU4E,SAAUN,GA7BzB,SAACO,GAChBS,EAAS,MACTC,EAAQ,CACNvH,UAAW,CACTgG,UAAWA,EACX0B,SAAUb,EAAMa,YAEjB5J,MACD,SAACoD,GACKA,EAAIhB,KAAKqH,QAAQH,IACnBzH,EAAQY,KAAK,KACbM,OAAOC,SAASC,UAEhBuG,EAASpG,EAAIhB,KAAKqH,QAAQF,QAG9B,WACEC,EAAS,4BAYT,UACE,qBAAKtF,UAAU,sBAAf,SACG3B,GAAS,cAAC,EAAD,CAAWA,MAAOA,MAE9B,qBAAK2B,UAAU,aAAf,SACE,8CACc,6BAAKyF,IADnB,gBAIF,qBAAKzF,UAAU,MAAf,SACE,qBAAKA,UAAU,sBAAf,SACE,mCACE8E,KAAK,OACL9E,UAAU,WACV+E,YAAY,eACRV,EAAS,WAAY,CAAEW,UAAU,UAI3C,qBAAKhF,UAAU,qBAAf,SACE,wBAAQA,UAAU,WAAlB,oCJpCA,cAAC,IAAD,CAAOsD,KAAK,cAAcC,UKhBZ,WACxB,IAAQrG,EAASqC,qBAAWvC,GAApBE,KACFqD,EAAUd,iBAAiC,MAC3C9B,EAAUC,cAChB,EAAmCwG,cAA3BE,EAAR,EAAQA,aAAcD,EAAtB,EAAsBA,SACtB,EAA0B5G,mBAAwB,MAAlD,mBAAOY,EAAP,KAAciH,EAAd,KACA,EAAqBzH,YAAYiF,IAA1B6C,EAAP,oBACA,EAAsB9H,YAAYkF,IAA3B6C,EAAP,oBAEAtH,qBAAU,WACRqB,IAAEkG,WAAWhG,KAAKU,EAAQT,WACzB,IAwCH,OACE,qCACE,8BACE,qBAAKE,UAAU,cAAf,SACE,mBAAGA,UAAU,aAAb,wBAGJ,qBAAKA,UAAU,MAAf,SACE,uBAAMA,UAAU,UAAU4E,SAAUN,GA9CjB,SAACO,GACxBS,EAAS,MACTK,EAAW,CACT3H,UAAW,CACTyH,YAAaZ,EAAMY,YACnB7I,OAAM,OAAEM,QAAF,IAAEA,OAAF,EAAEA,EAAMuD,OAEf3E,MACD,SAACoD,GACKA,EAAIhB,KAAKyH,WAAWP,IACtBzH,EAAQY,KAAK,KACbM,OAAOC,SAASC,UAEhBuG,EAASpG,EAAIhB,KAAKyH,WAAWN,QAGjC,WACEC,EAAS,4BA6BT,UACE,qBAAKtF,UAAU,sBAAf,SACG3B,GAAS,oBAAI2B,UAAU,2BAAd,SAA0C3B,MAEtD,sBAAK2B,UAAU,MAAf,UACE,qBAAKA,UAAU,sBAAf,SACE,mCACE8E,KAAK,OACL9E,UAAU,WACV+E,YAAY,kBACRV,EAAS,mBAGjB,qBAAKrE,UAAU,eAEjB,qBAAKA,UAAU,qBAAf,SACE,wBAAQA,UAAU,WAAlB,iCAIN,qBAAKA,UAAU,MAAf,SACE,uBAAMA,UAAU,UAAU4E,SAAUN,GA7ChB,SAACO,GACzB,IAAMlE,EAAYmF,SAASjB,EAAMlE,WACjCiF,EAAY,CACV5H,UAAW,CACT2C,UAAWA,EACX/D,OAAM,OAAEM,QAAF,IAAEA,OAAF,EAAEA,EAAMuD,OAEf3E,MAAK,SAACoD,GACHA,EAAIhB,KAAK6H,sBAAsBX,GACjCzH,EAAQY,KAAK,KAEb+G,EAASpG,EAAIhB,KAAK6H,sBAAsBV,KAAO,8BAkC/C,UACE,gEACA,sBAAKrF,UAAU,MAAf,UACE,qBAAKA,UAAU,sBAAf,SACE,mCACE8E,KAAK,SACL9E,UAAU,WACV+E,YAAY,kBACRV,EAAS,iBAGjB,qBAAKrE,UAAU,eAEjB,qBAAKA,UAAU,qBAAf,SACE,wBAAQA,UAAU,WAAW8E,KAAK,SAAlC,wCL7EA,cAAC,IAAD,CAAOxB,KAAK,SAASC,UM3BZ,WACnB,OACE,qCACE,qBACEnD,IAAI,iBACJC,IAAI,iBACJL,UAAWgG,KAAOC,cAEpB,oBAAIjG,UAAU,eAAd,iFNyBJkG,SAASC,eAAe,SAM1BxK,K,mBOxCAyK,EAAOC,QAAU,CAAC,YAAc,6B","file":"static/js/main.badbe720.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { gql } from '@apollo/client';\n\nexport const SIGNUP = gql`\n  mutation signup($email: String!, $name: String!) {\n    signup(email: $email, name: $name) {\n      ok\n      err\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const GET_USER_BY_ID = gql`\n  query getUserById($userId: String!) {\n    getUserById(userId: $userId) {\n      _id\n      name\n      email\n    }\n  }\n`;\n","import { Subject } from 'rxjs';\n\nconst subject = new Subject<number>();\n\nexport class LocalStorageService {\n  static checkIfUserIdIsInLocalStorage() {\n    const localStorageUser = localStorage.getItem('userId');\n    return localStorageUser ? true : false;\n  }\n\n  static setUserIdInLocalStorage(userId: string) {\n    localStorage.setItem('userId', userId);\n    subject.next(1);\n  }\n\n  static removeUserIdFromLocalStorage() {\n    localStorage.removeItem('userId');\n  }\n\n  static getUserIdFromLocalStorage() {\n    return localStorage.getItem('userId');\n  }\n\n  static subscribeToChanges() {\n    return subject;\n  }\n}\n//subscribe to changes, will return the subject\n","import { useMutation, useQuery } from '@apollo/client';\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport { createContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { SIGNUP } from '../gql/mutation/signup';\nimport { GET_USER_BY_ID } from '../gql/query/getUserById';\nimport { LocalStorageService } from '../services/LocalStorageService';\nimport { DbUser } from '../types';\n\ninterface Context {\n  user: DbUser | undefined;\n  loginUser: (email: string) => void;\n  logoutUser: () => void;\n  signupUser: any; //? How to type this\n}\n\nexport const UserContext = createContext<Context>({\n  user: undefined,\n  loginUser: () => {},\n  logoutUser: () => {},\n  signupUser: () => {},\n});\n\nexport const ContextProvider: React.FC<{}> = ({ children }) => {\n  const [user, setUser] = useState<DbUser>();\n  const history = useHistory();\n  const [userSignup] = useMutation(SIGNUP);\n  const { data, loading, refetch, error } = useQuery<{\n    getUserById: DbUser;\n  }>(GET_USER_BY_ID, {\n    variables: { userId: LocalStorageService.getUserIdFromLocalStorage() },\n  });\n\n  useEffect(() => {\n    if (!LocalStorageService.getUserIdFromLocalStorage()) {\n      history.push('/login');\n    }\n  }, []);\n\n  useEffect(() => {\n    if (data && !loading && !error) {\n      setUser(data.getUserById);\n    }\n  }, [data]);\n\n  const loginUser = (userId: string) => {\n    LocalStorageService.setUserIdInLocalStorage(userId);\n    refetch();\n  };\n\n  const logoutUser = () => {\n    LocalStorageService.removeUserIdFromLocalStorage();\n    window.location.reload();\n  };\n\n  const signupUser = (email: string, name: string) => {\n    return userSignup({\n      variables: {\n        email: email,\n        name: name,\n      },\n    }).then((res) => res);\n  };\n\n  return (\n    <UserContext.Provider value={{ user, loginUser, logoutUser, signupUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const UserProvider = () => React.useContext(UserContext);\n","import './index.scss';\nimport M from 'materialize-css';\nimport { useEffect } from 'react';\nimport { useRef } from 'react';\nimport { DbProject } from '../../types';\nimport { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { UserContext } from '../../context';\n\nexport const SidenavAndHeader = ({\n  userProjects,\n  activeProject,\n  setActiveProject,\n}: {\n  userProjects: DbProject[] | undefined;\n  activeProject: DbProject | undefined;\n  setActiveProject: (project: DbProject) => void;\n}) => {\n  const { user, logoutUser } = useContext(UserContext);\n  const sidenav = useRef<HTMLDivElement | null>(null);\n  const popup = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    M.Sidenav.init(sidenav.current as Element);\n    M.Modal.init(popup.current as Element);\n  }, []);\n\n  return (\n    <>\n      <nav>\n        <div className='nav-wrapper'>\n          <a className='brand-logo'>{activeProject?.name}</a>\n          <a>\n            <i\n              className='material-icons sidenav-trigger'\n              data-target='slide-out'>\n              menu\n            </i>\n          </a>\n        </div>\n      </nav>\n      <div id='slide-out' className='sidebar-container sidenav' ref={sidenav}>\n        <div className='sidebar-top-bar'>\n          <img\n            src='avatarIcon.png'\n            alt='iconAvatar'\n            className='sidebar-avatar'\n          />\n          {user && <p>{user.name}</p>}\n        </div>\n        <div>\n          <ul className='collection'>\n            <h5 className='sidebar-options-header '>\n              <i className='material-icons'>folder_open</i>Projects\n            </h5>\n            {userProjects ? (\n              userProjects.map((project: DbProject) => {\n                return (\n                  <li\n                    className='collection-item'\n                    key={project._id}\n                    onClick={() => setActiveProject(project)}>\n                    {project.name}\n                  </li>\n                );\n              })\n            ) : (\n              <li>Loading</li>\n            )}\n\n            <button\n              className='btn modal-trigger btn-flat sidebar-share'\n              data-target='modal1'>\n              {' '}\n              <i className='material-icons'>share</i> Share this project!\n            </button>\n          </ul>\n          <Link to='/newProject'>\n            <button className='btn modal-trigger btn-flat sidebar-share'>\n              {' '}\n              <i className='material-icons'>add</i> New Project\n            </button>\n          </Link>\n          <div className='row logout'>\n            <button className='btn btn-flat' onClick={() => logoutUser()}>\n              <i className='material-icons '>logout</i> Logout\n            </button>\n          </div>\n          <div id='modal1' className='modal' ref={popup}>\n            <div className='modal-content '>\n              <h5>Share this code</h5>\n              {activeProject && <p>{activeProject.shareCode}</p>}\n            </div>\n            <div className='modal-footer'>\n              <a\n                href='#!'\n                className='modal-close waves-effect waves-green btn-flat'>\n                Agree\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { gql } from '@apollo/client';\n\nexport const MARK_TASK_AS_COMPLETED = gql`\n  mutation markTaskAsCompleted($projectId: String!, $taskId: String!) {\n    markTaskAsCompleted(projectId: $projectId, taskId: $taskId) {\n      ok\n      err\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const GET_ALL_USER_PROJECTS = gql`\n  query getAllUserProjects($userId: String!) {\n    getAllUserProjects(userId: $userId) {\n      _id\n      name\n      participants\n      tasks {\n        _id\n        name\n        completed\n      }\n      shareCode\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const CHANGES_IN_TASK = gql`\n  subscription changesInTask {\n    changesInTask\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const GET_USER_BY_EMAIL = gql`\n  query getUserByEmail($email: String!) {\n    getUserByEmail(email: $email) {\n      _id\n      name\n      email\n    }\n  }\n`;\n","export const ErrorCard = ({ error }: { error: string }) => {\n  return <h5 className='card-panel red lighten-2'>{error}</h5>;\n};\n","import { gql } from '@apollo/client';\n\nexport const NEW_TASK = gql`\n  mutation newTask($projectId: String!, $taskName: String!) {\n    newTask(projectId: $projectId, taskName: $taskName) {\n      ok\n      err\n    }\n  }\n`;\n","require('dotenv').config();\n\nexport class EnviromentVariables {\n  static getUriForHttpServer() {\n    return `http://${process.env.REACT_APP_HTTP_SERVER_HOST}:${this.getPort()}`;\n  }\n  static getUriForWsServer() {\n    return (\n      `ws://${process.env.REACT_APP_WS_SERVER_HOST}:${this.getPort()}/${\n        process.env.REACT_APP_WS_SERVER_PATH\n      }` || 'ws://localhost:4000/projects'\n    );\n  }\n  static getPort() {\n    return process.env.REACT_APP_SERVER_PORT || 4000;\n  }\n}\n","import { ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { EnviromentVariables } from './EnviromentVariablesService';\n\nconst wsLink = new WebSocketLink({\n  uri: EnviromentVariables.getUriForWsServer(),\n  options: {\n    reconnect: true,\n  },\n});\n\nconst httpLink = new HttpLink({\n  uri: EnviromentVariables.getUriForHttpServer(),\n});\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nexport const apolloClient = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n});\n","import { gql } from '@apollo/client';\n\nexport const NEW_PROJECT = gql`\n  mutation newProject($projectName: String!, $userId: String!) {\n    newProject(projectName: $projectName, userId: $userId) {\n      ok\n      err\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const JOIN_TO_AN_EXISTING_PROJECT = gql`\n  mutation addToProject($shareCode: Int!, $userId: String!) {\n    joinToExistingProject(shareCode: $shareCode, userId: $userId) {\n      ok\n      err\n    }\n  }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Switch, BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Home } from './pages/home';\nimport './index.scss';\nimport { LoginScreen } from './pages/login';\nimport { NewTask } from './pages/newTask';\nimport { ApolloProvider } from '@apollo/client';\nimport { SignupScreen } from './pages/signup';\nimport { apolloClient } from './services/ApolloClient';\nimport { ContextProvider } from './context';\nimport { NewProject } from './pages/newProject';\nimport { Error } from './pages/error';\n\nReactDOM.render(\n  <ApolloProvider client={apolloClient}>\n    <Router>\n      <ContextProvider>\n        <React.StrictMode>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/login' component={LoginScreen} />\n            <Route path='/signup' component={SignupScreen} />\n            <Route\n              path='/newTask/:projectName/:projectId'\n              component={NewTask}\n            />\n            <Route path='/newProject' component={NewProject} />\n            <Route path='/error' component={Error} />\n          </Switch>\n        </React.StrictMode>\n      </ContextProvider>\n    </Router>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import './index.scss';\nimport { useHistory } from 'react-router-dom';\nimport { SidenavAndHeader } from '../../components/SidenavAndHeader';\nimport { DbProject, DbTask } from '../../types';\nimport { useEffect } from 'react';\nimport { useMutation, useQuery, useSubscription } from '@apollo/client';\nimport { MARK_TASK_AS_COMPLETED } from '../../gql/mutation/markTaskAsCompleted';\nimport { GET_ALL_USER_PROJECTS } from '../../gql/query/getAllUserProjects';\nimport { LocalStorageService } from '../../services/LocalStorageService';\nimport { useState } from 'react';\nimport { CHANGES_IN_TASK } from '../../gql/susbcription/changesInTask';\n\nexport const Home = () => {\n  let history = useHistory();\n  const [markTaskAsCompleted] = useMutation(MARK_TASK_AS_COMPLETED);\n  const [activeProject, setActiveProject] = useState<DbProject>();\n  const [userProjects, setUserProjects] = useState<DbProject[]>();\n  const { data } = useSubscription(CHANGES_IN_TASK);\n  const allUserProjects = useQuery<{\n    getAllUserProjects: DbProject[];\n  }>(GET_ALL_USER_PROJECTS, {\n    variables: {\n      userId: LocalStorageService.getUserIdFromLocalStorage(),\n    },\n    onError: () => {\n      history.push('/error');\n    },\n  });\n\n  useEffect(() => {\n    if (\n      allUserProjects.data &&\n      !allUserProjects.error &&\n      !allUserProjects.loading\n    ) {\n      setActiveProject(allUserProjects.data.getAllUserProjects[0]);\n      setUserProjects(allUserProjects.data.getAllUserProjects);\n    }\n  }, [allUserProjects.data]);\n\n  const markAsCompleted = (taskId: string) => {\n    markTaskAsCompleted({\n      variables: {\n        projectId: activeProject?._id,\n        taskId: taskId,\n      },\n    });\n  };\n  //TODO: use callback here, to the methods in SignupAndHeader\n  useEffect(() => {\n    allUserProjects.refetch();\n  }, [data]);\n\n  return (\n    <>\n      <SidenavAndHeader\n        userProjects={userProjects}\n        activeProject={activeProject}\n        setActiveProject={setActiveProject}\n      />\n      <ul className='collection tasklist'>\n        {activeProject ? (\n          activeProject.tasks?.map((task: DbTask) => {\n            if (!task.completed) {\n              return (\n                <li\n                  className='collection-item'\n                  key={task.name}\n                  onClick={() => markAsCompleted(task._id)}>\n                  <i className='material-icons'>check_box_outline_blank</i>\n                  {task.name}\n                </li>\n              );\n            }\n          })\n        ) : (\n          <h4>No tasks yet!</h4>\n        )}\n        {activeProject ? (\n          activeProject.tasks?.map((task: DbTask) => {\n            if (task.completed) {\n              return (\n                <li\n                  className='collection-item finished'\n                  key={task.name}\n                  onClick={() => markAsCompleted(task._id)}>\n                  <i className='material-icons'>check_box</i>\n                  {task.name}\n                </li>\n              );\n            }\n          })\n        ) : (\n          <h4>No tasks yet!</h4>\n        )}\n      </ul>\n      <div className='container-button'>\n        <button\n          className='material-icons add-task'\n          onClick={() =>\n            history.push(\n              `/newTask/${activeProject?.name}/${activeProject?._id}`\n            )\n          }>\n          add_circle\n        </button>\n      </div>\n    </>\n  );\n};\n","import { useForm } from 'react-hook-form';\nimport './index.scss';\nimport { Link, useHistory } from 'react-router-dom';\nimport { LocalStorageService } from '../../services/LocalStorageService';\nimport { useLazyQuery } from '@apollo/client';\nimport { GET_USER_BY_EMAIL } from '../../gql/query/getUserByEmail';\nimport { DbUser } from '../../types';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { ErrorCard } from '../../components/Error';\n\nexport const LoginScreen = () => {\n  const { register, handleSubmit } = useForm();\n  const [customError, setCustomError] = useState<string | null>(null);\n  const history = useHistory();\n  const [userLogin, { data, loading, error }] =\n    useLazyQuery<{ getUserByEmail: DbUser }>(GET_USER_BY_EMAIL);\n\n  const onSubmit = (input: { email: string }) => {\n    setCustomError(null);\n    userLogin({\n      variables: {\n        email: input.email,\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (data && !error && !loading) {\n      LocalStorageService.setUserIdInLocalStorage(data.getUserByEmail._id);\n      history.push('/');\n      window.location.reload();\n    }\n\n    if (!data && error && !loading) {\n      setCustomError('There was an error');\n    }\n  }, [data]);\n\n  return (\n    <>\n      <nav>\n        <div className='nav-wrapper'>\n          <p className='brand-logo'>Taskia</p>\n        </div>\n      </nav>\n      <div className='center-align login-container'>\n        {customError && <ErrorCard error={customError} />}\n        <h3>You're not logged!</h3>\n        <h4>Just type your email</h4>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input\n            type='email'\n            className='email'\n            id=''\n            placeholder='example@mail.com'\n            {...register('email', { required: true })}\n          />\n          <button className='waves-effect waves-green btn-large'>Login</button>\n          <div>\n            <div>\n              Or if you dont have account you can{' '}\n              <Link to='/signup'>signup </Link> to Taskia\n            </div>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n","import { ErrorCard } from '../../components/Error';\nimport { useForm } from 'react-hook-form';\nimport './index.scss';\nimport { useContext, useState } from 'react';\nimport { UserContext } from '../../context';\nimport { GenericDbResponse } from '../../types';\n\ninterface FormInput {\n  name: string;\n  email: string;\n}\n\nexport const SignupScreen = () => {\n  const { register, handleSubmit } = useForm<FormInput>();\n  const [customError, setCustomError] = useState<string | null>(null);\n  const { signupUser } = useContext(UserContext);\n  const onSubmit = async (data: FormInput) => {\n    const result: { data: { signup: GenericDbResponse } } = await signupUser(\n      data.email,\n      data.name\n    );\n    if (!result.data.signup.ok) {\n      setCustomError(result.data.signup.err);\n    }\n  };\n\n  return (\n    <>\n      <nav>\n        <div className='nav-wrapper'>\n          <p className='brand-logo'>Taskia</p>\n        </div>\n      </nav>\n      <div className='center-align login-container'>\n        <h3>Signup now!</h3>\n        <h4>It's that easy, no password needed</h4>\n\n        {customError && <ErrorCard error={customError} />}\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <input\n            type='text'\n            className='email'\n            id=''\n            placeholder='John Doe'\n            {...register('name', { required: true })}\n          />\n          <input\n            type='email'\n            className='email'\n            id=''\n            placeholder='example@mail.com'\n            {...register('email', { required: true })}\n          />\n          <button className='waves-effect waves-green btn-large'>Signup</button>\n        </form>\n      </div>\n    </>\n  );\n};\n","import { useForm } from 'react-hook-form';\nimport { useMutation } from '@apollo/client';\nimport { NEW_TASK } from '../../gql/mutation/newTask';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport { ErrorCard } from '../../components/Error';\n\nexport const NewTask = () => {\n  const history = useHistory();\n  const { handleSubmit, register } = useForm();\n  const [error, setError] = useState<string | null>(null);\n  const [newTask] = useMutation(NEW_TASK);\n  const { projectName, projectId } =\n    useParams<{ projectName: string; projectId: string }>();\n\n  const onSubmit = (input: { taskName: string }) => {\n    setError(null);\n    newTask({\n      variables: {\n        projectId: projectId,\n        taskName: input.taskName,\n      },\n    }).then(\n      (res) => {\n        if (res.data.newTask.ok) {\n          history.push('/');\n          window.location.reload();\n        } else {\n          setError(res.data.newTask.err);\n        }\n      },\n      () => {\n        setError('There was an error');\n      }\n    );\n  };\n  return (\n    <>\n      <nav>\n        <div className='nav-wrapper'>\n          <p className='brand-logo'>Taskia</p>\n        </div>\n      </nav>\n      <div className='row'>\n        <form className='col s12' onSubmit={handleSubmit(onSubmit)}>\n          <div className='input-field col s12'>\n            {error && <ErrorCard error={error} />}\n          </div>\n          <div className='row center'>\n            <h5>\n              Add task to <em>{projectName}</em> project\n            </h5>\n          </div>\n          <div className='row'>\n            <div className='input-field col s12'>\n              <input\n                type='text'\n                className='validate'\n                placeholder='New task...'\n                {...register('taskName', { required: true })}\n              />\n            </div>\n          </div>\n          <div className='new-task-container'>\n            <button className='add-task'>Add task!</button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n","import { useEffect, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport './index.scss';\nimport M from 'materialize-css';\nimport { useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router-dom';\nimport { useState } from 'react';\nimport { NEW_PROJECT } from '../../gql/mutation/newProject';\nimport { JOIN_TO_AN_EXISTING_PROJECT } from '../../gql/mutation/joinToAnExistingProject';\nimport { useContext } from 'react';\nimport { UserContext } from '../../context';\n\nexport const NewProject = () => {\n  const { user } = useContext(UserContext);\n  const project = useRef<HTMLSelectElement | null>(null);\n  const history = useHistory();\n  const { handleSubmit, register } = useForm();\n  const [error, setError] = useState<string | null>(null);\n  const [newProject] = useMutation(NEW_PROJECT);\n  const [joinProject] = useMutation(JOIN_TO_AN_EXISTING_PROJECT);\n\n  useEffect(() => {\n    M.FormSelect.init(project.current as Element);\n  }, []);\n\n  const handleNewProject = (input: { projectName: string }) => {\n    setError(null);\n    newProject({\n      variables: {\n        projectName: input.projectName,\n        userId: user?._id,\n      },\n    }).then(\n      (res) => {\n        if (res.data.newProject.ok) {\n          history.push('/');\n          window.location.reload();\n        } else {\n          setError(res.data.newProject.err);\n        }\n      },\n      () => {\n        setError('There was an error');\n      }\n    );\n  };\n\n  const handleJoinProject = (input: { shareCode: string }) => {\n    const shareCode = parseInt(input.shareCode);\n    joinProject({\n      variables: {\n        shareCode: shareCode,\n        userId: user?._id,\n      },\n    }).then((res) => {\n      if (res.data.joinToExistingProject.ok) {\n        history.push('/');\n      } else {\n        setError(res.data.joinToExistingProject.err || 'Something went wrong');\n      }\n    });\n  };\n\n  return (\n    <>\n      <nav>\n        <div className='nav-wrapper'>\n          <p className='brand-logo'>Taskia</p>\n        </div>\n      </nav>\n      <div className='row'>\n        <form className='col s12' onSubmit={handleSubmit(handleNewProject)}>\n          <div className='input-field col s12'>\n            {error && <h5 className='card-panel red lighten-2'>{error}</h5>}\n          </div>\n          <div className='row'>\n            <div className='input-field col s12'>\n              <input\n                type='text'\n                className='validate'\n                placeholder='New project...'\n                {...register('projectName')}\n              />\n            </div>\n            <div className='col s12'></div>\n          </div>\n          <div className='new-task-container'>\n            <button className='add-task'>Add project!</button>\n          </div>\n        </form>\n      </div>\n      <div className='row'>\n        <form className='col s12' onSubmit={handleSubmit(handleJoinProject)}>\n          <h5>Or join to an existing project</h5>\n          <div className='row'>\n            <div className='input-field col s12'>\n              <input\n                type='number'\n                className='validate'\n                placeholder='New project...'\n                {...register('shareCode')}\n              />\n            </div>\n            <div className='col s12'></div>\n          </div>\n          <div className='new-task-container'>\n            <button className='add-task' type='submit'>\n              Join project!\n            </button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n","import styles from './index.module.scss';\n\nexport const Error = () => {\n  return (\n    <>\n      <img\n        src='LogoTaskia.png'\n        alt='Logo of Taskia'\n        className={styles.taskiaImage}\n      />\n      <h4 className='center-align'>\n        There was an unrecoverable error, try again later.\n      </h4>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskiaImage\":\"error_taskiaImage__1w2Et\"};"],"sourceRoot":""}